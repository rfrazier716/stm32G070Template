CMAKE_MINIMUM_REQUIRED(VERSION 3.12) # Set Required Version
#cmake_policy(SET CMP0065 NEW)

MESSAGE("COMPILE TYPE: ${COMPILE_TYPE}") # Compile types are Debug, Release, or UnitTest

####################################################
#
# Compiler Setup
# Configures the ARM-GCC Compiler and Linker
#
####################################################

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_CROSSCOMPILING TRUE)

# force compiler settings
SET(CMAKE_C_COMPILER_WORKS TRUE)
SET(CMAKE_CXX_COMPILER_WORKS TRUE)

# Tell System where the compilers are, Change this to point to the installation directory of your ARM-GCC Install
SET(ARM_GCC_DIRECTORY     "C:/Program Files (x86)/GNU Tools ARM Embedded/9 2019-q4-major")


SET(CMAKE_ASM_COMPILER    "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-gcc.exe")
SET(CMAKE_C_COMPILER      "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-gcc.exe")
SET(CMAKE_CXX_COMPILER    "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-g++.exe")
SET(ELF2BIN               "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-objcopy.exe")
SET(SIZE                  "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-size.exe")
SET(NM                    "${ARM_GCC_DIRECTORY}/bin/arm-none-eabi-nm.exe")

# Put location of Compilers Standard Headers or Intellisense won't find them (Program still compiles fine without this)
INCLUDE_DIRECTORIES("C:\\Program Files (x86)\\GNU Tools ARM Embedded\\9 2019-q4-major\\arm-none-eabi\\include")


# Set Complier Flags
# Must have ffunction-sections and fdata-sections, this allows the linker to drop dead code when you use the linker gc-sections flag
SET(COMMON_FLAGS "-std=gnu11 -g3 -DUSE_HAL_DRIVER -DDEBUG -O0 -ffunction-sections -fdata-sections -Wall -fstack-usage --specs=nano.specs -mfloat-abi=soft -mthumb")
SET(CMAKE_C_FLAGS "${COMMON_FLAGS}")
SET(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")

####################################################
#
# Project Settings
# Compiles the toolchain into a static library, add any external libraries here as well
# Copies the compiled ELF file into a hex and bin file, putting htem in
#
####################################################

# set the project name here, this will be the name of the bin/hex file as well
SET(PROJECT_NAME "stm32Project")

#Actual Project Starts here
PROJECT(${PROJECT_NAME} 
        VERSION 0.0
        LANGUAGES C CXX ASM)

#Build the Toolchain and update linker script
INCLUDE("${CMAKE_CURRENT_SOURCE_DIR}/cmake/toolchain.cmake")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections -Wl,--start-group -T \"${LINKER_SCRIPT}\" -Wl,--end-group")

#Build the Main Project Code
SET(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Core/Src")
SET(TARGET_NAME "${PROJECT_NAME}")

#Add all of the files under the Main Src directory into the target, comment out any that are not used
ADD_EXECUTABLE(${TARGET_NAME}
${SOURCE_DIR}/main.c
${SOURCE_DIR}/${MCU_FAMILY}_hal_msp.c
${SOURCE_DIR}/${MCU_FAMILY}_it.c
${SOURCE_DIR}/syscalls.c
#${SOURCE_DIR}/sysmem.c
${SOURCE_DIR}/system_${MCU_FAMILY}.c
)
TARGET_LINK_LIBRARIES(${TARGET_NAME} ${LIBNAME})
#SET_TARGET_PROPERTIES({$TARGET_NAME} PROPERTIES LINK_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections -T \"${LINKER_SCRIPT}\"")

## IF the User has files to add include them here with TARGET_SOURCES() ##

# Generate .hex and .bin files 

add_custom_command(TARGET "${TARGET_NAME}" POST_BUILD
    COMMAND ${ELF2BIN} -O ihex $<TARGET_FILE:${TARGET_NAME}> $<TARGET_FILE:${TARGET_NAME}>.hex
    COMMAND ${CMAKE_COMMAND} -E echo "-- built: $<TARGET_FILE:${TARGET_NAME}>.hex"
    )

add_custom_command(TARGET "${TARGET_NAME}" POST_BUILD
    COMMAND ${ELF2BIN} -O binary $<TARGET_FILE:${TARGET_NAME}> $<TARGET_FILE:${TARGET_NAME}>.bin
    COMMAND ${CMAKE_COMMAND} -E echo "-- built: $<TARGET_FILE:${TARGET_NAME}>.bin"
    )

# prints information about memory consumption
add_custom_command(TARGET "${TARGET_NAME}" POST_BUILD
    COMMAND ${SIZE} $<TARGET_FILE:${TARGET_NAME}>
    )

#Uncomment if you want a list of all symbols
#add_custom_command(TARGET "${TARGET_NAME}" POST_BUILD
#    COMMAND ${NM} --size $<TARGET_FILE:${TARGET_NAME}>
#    )